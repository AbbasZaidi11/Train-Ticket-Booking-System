/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import entities.Ticket;
import entities.Train;
import entities.User;
import entities.services.UserBookingService;
import util.UserServiceUtil;

import java.sql.Time;
import java.util.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.UUID;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Running Train Booking System");

        int option = 0;
        UserBookingService userBookingService;
        try {
            userBookingService = new UserBookingService();
        } catch (IOException ex) {
            System.out.println("There is something wrong while initializing services.");
            return;
        }

        Train trainSelectedForBooking = null;
        String lastSource = null;
        String lastDest = null;

        while (option != 7) {
            System.out.println("\nChoose option");
            System.out.println("1. Sign up");
            System.out.println("2. Login");
            System.out.println("3. Fetch Bookings");
            System.out.println("4. Search Trains");
            System.out.println("5. Book a Seat");
            System.out.println("6. Cancel my Booking");
            System.out.println("7. Exit the App");

            String line = sc.nextLine();

            if (line.isEmpty()) continue;
            option = Integer.parseInt(line);

            switch (option) {
                case 1: { // Sign up
                    System.out.println("Enter the username to Signup");
                    String nameToSignUp = sc.nextLine();
                    System.out.println("Enter the password to Signup");
                    String passwordToSignUp = sc.nextLine();

                    User userToSignup = new User(
                            nameToSignUp,
                            passwordToSignUp,
                            UserServiceUtil.hashPassword(passwordToSignUp),
                            new ArrayList<>(),
                            UUID.randomUUID().toString()
                    );
                    Boolean ok = userBookingService.signUp(userToSignup);
                    if (ok) {
                        userBookingService.setCurrentUser(userToSignup);
                        System.out.println("Signup successful and logged in as: " + nameToSignUp);
                    } else {
                        System.out.println("Signup failed.");
                    }
                    break;
                }
                case 2: { // Login
                    System.out.println("Enter the username to Login");
                    String nameToLogin = sc.nextLine();
                    System.out.println("Enter the password to Login");
                    String passwordToLogin = sc.nextLine();

                    User userAttempt = new User(
                            nameToLogin,
                            passwordToLogin,
                            UserServiceUtil.hashPassword(passwordToLogin), // will only be used for new users; login uses check
                            new ArrayList<>(),
                            "" // temporary; real user looked up from file
                    );

                    Optional<User> found = userBookingService.loginUser(userAttempt);
                    if (found.isPresent()) {
                        userBookingService.setCurrentUser(found.get());
                        System.out.println("Login successful! Hello, " + found.get().getName());
                    } else {
                        System.out.println("Invalid credentials!");
                    }
                    break;
                }
                case 3: { // Fetch bookings
                    if (userBookingService.getCurrentUser() == null) {
                        System.out.println("Please login or signup first.");
                        break;
                    }
                    System.out.println("Fetching your bookings");
                    userBookingService.fetchBooking();
                    break;
                }
                case 4: { // Search trains
                    System.out.println("Type your source station");
                    lastSource = sc.nextLine().trim().toLowerCase();
                    System.out.println("Type your destination station");
                    lastDest = sc.nextLine().trim().toLowerCase();

                    List<Train> trains = userBookingService.getTrains(lastSource, lastDest);
                    if (trains.isEmpty()) {
                        System.out.println("No trains found for " + lastSource + " -> " + lastDest);
                        break;
                    }

                    int index = 1;
                    for (Train t : trains) {
                        System.out.println(index + ". Train id: " + t.getTrainId() + " | Train no: " + t.getTrainNo());
                        for (Map.Entry<String, Time> entry : t.getStationTime().entrySet()) {
                            System.out.println("   station " + entry.getKey() + " time: " + entry.getValue());
                        }
                        index++;
                    }
                    System.out.println("Select a train by typing 1,2,3...");
                    int choice = Integer.parseInt(sc.nextLine().trim());
                    if (choice < 1 || choice > trains.size()) {
                        System.out.println("Invalid train selection.");
                        break;
                    }
                    trainSelectedForBooking = trains.get(choice - 1);
                    System.out.println("Selected train: " + trainSelectedForBooking.getTrainInfo());
                    break;
                }
                case 5: { // Book a seat
                    if (userBookingService.getCurrentUser() == null) {
                        System.out.println("Please login or signup first.");
                        break;
                    }
                    if (trainSelectedForBooking == null) {
                        System.out.println("Please search and select a train first (option 4).");
                        break;
                    }
                    System.out.println("Select a seat out of these seats (0=free, 1=booked)");
                    List<List<Integer>> seats = userBookingService.fetchSeats(trainSelectedForBooking);
                    for (List<Integer> row : seats) {
                        for (Integer val : row) System.out.print(val + " ");
                        System.out.println();
                    }

                    System.out.println("Select the seat by typing the row and column (0-indexed)");
                    System.out.print("Enter the row: ");
                    int row = Integer.parseInt(sc.nextLine().trim());
                    System.out.print("Enter the column: ");
                    int col = Integer.parseInt(sc.nextLine().trim());

                    System.out.println("Booking your seat....");
                    Boolean booked = userBookingService.bookTrainSeat(trainSelectedForBooking, row, col);
                    if (booked.equals(Boolean.TRUE)) {
                        // create and persist ticket
                        Ticket t = new Ticket(
                                UUID.randomUUID().toString(),
                                userBookingService.getCurrentUser().getUserId(),
                                lastSource == null ? "" : lastSource,
                                lastDest == null ? "" : lastDest,
                                new Date(),
                                trainSelectedForBooking,
                                row,
                                col
                        );
                        boolean added = userBookingService.addTicketToCurrentUser(t);
                        if (added) {
                            System.out.println("Booked! Enjoy your journey. Ticket ID: " + t.getTicketId());
                        } else {
                            System.out.println("Seat booked, but failed to save ticket. Please note your seat.");
                        }
                    } else {
                        System.out.println("Can't book this seat");
                    }
                    break;
                }
                case 6: { // Cancel booking
                    if (userBookingService.getCurrentUser() == null) {
                        System.out.println("Please login or signup first.");
                        break;
                    }
                    System.out.print("Enter Ticket ID to cancel: ");
                    String ticketId = sc.nextLine().trim();
                    boolean ok = userBookingService.cancelBooking(ticketId);
                    System.out.println(ok ? "Ticket cancelled." : "Ticket not found or failed to cancel.");
                    break;
                }
                default:
                    break;
            }
        }
    }
}
